@model ProLEGO.Models.ProjectVM

@{
    ViewBag.Title = "Project Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var rolelabelarray = new List<string>();
    rolelabelarray.Add("label-success");
    rolelabelarray.Add("label-primary");
    rolelabelarray.Add("label-warning");
}

<script src="~/Scripts/prolego.js" type="text/javascript"></script>

<div id="pro-detail-body"></div>
<div id="pro-detail-header"></div>
<div class="container detail-header">
    <span class="col-md-5 logo"></span>
    <div class="col-md-3 detail-machine">
        <span class="img-computer"></span>
        @if (ViewBag.compName != null)
        {
            <span>@ViewBag.compName</span>
        }
        else
        {
            <span>SHG-L80000000</span>
        }
    </div>
</div>
@if (Model != null)
{
    var memberheigh = (Model.PJMemList.Count + 1) * 20;

    <div class="container">
        <div class="detail-body">
            <div class="project-detail-top"></div>
            <div class="project-key">
                <div class="project-circle-top-img"></div>
                <div class="project-detail-key">
                    <div class="project-name">
                        <span id="project_key">@Model.ProjectName</span>
                        <img src="~/Content/images/pro_log.png" height="30" width="30">
                    </div>
                    @*<div class="project-description">
                        <span class="detail-show">
                            Description Description Description Description
                        </span>
                        <div class="detail-edit hidden">
                            <input id="project" name="project" class="form-control"
                                   value="Description Description Description Description">
                        </div>
                    </div>*@
                </div>
            </div>

            @*<div class="project-detail project-member" style="height: @(memberheigh)px;">
                <div class="project-circle-img"></div>
                <div class="project-detail-mid">
                    <div class="project-detail-content" data-col-id="1" data-col-type="ROLE">
                        @for (var ridx = 0; ridx < Model.PJMemList.Count; ridx++)
                        {
                            <div class="project-label-member">
                                <span class="detail-edit hidden">
                                    <img src="~/Content/images/dot_del.png" class="edit-dot-del">
                                </span>
                                <span>@Model.PJMemList[ridx].colvalue</span>
                                <span class="label @rolelabelarray[ridx%3]">@Model.PJMemList[ridx].colname</span>
                            </div>
                        }

                        <div class="detail-edit hidden">
                            <input type="text" class="form-control edit-autocomplete-input"
                                   id="member_name" ame="member_name" autocomplete="off"
                                   placeholder="Member Name" />
                            <input type="text" class="form-control edit-autocomplete-input"
                                   id="member_role" name="member_role" autocomplete="off"
                                   placeholder="Member Role" />
                            <div class="edit-add-img"></div>
                        </div>
                    </div>
                    <div class="project-detail-line"></div>
                    <div class="project-detail-title">Member</div>
                    <div class="project-title-circle"></div>
                </div>
            </div>*@

            @for (var nidx = 0; nidx < Model.PJMemList.Count; nidx++)
            {
                var item = Model.PJMemList[nidx];
                var ps = new string[] { };
                if (!string.IsNullOrEmpty(item.colvalue))
                {
                    ps = item.colvalue.Split(new string[] { ",", ";" }, StringSplitOptions.RemoveEmptyEntries);
                }
                <div class="project-detail" data-col-type="@item.coltype">
                    <div class="project-circle-img"></div>
                    <div class="project-detail-mid">
                        <div class="project-detail-content">
                            @foreach (var p in ps)
                            {
                                <div class="project-label-member">
                                    <span class="detail-edit hidden">
                                        <img src="~/Content/images/dot_del.png" class="edit-dot-del">
                                    </span>
                                    <span>@p</span>
                                </div>
                            }
                            <div class="detail-edit hidden">
                                <input type="text" class="form-control autocomplete-input" id="@item.colname.Replace(" ","_")"
                                        name="@item.colname.Replace(" ","_")" autocomplete="off" />
                                <div class="edit-add-img"></div>
                            </div>
                        </div>
                        <div class="project-detail-line"></div>
                        <div class="project-detail-title">@item.colname</div>
                        <div class="project-title-circle"></div>
                    </div>
                </div>
                <script type="text/javascript">
                    $('#@item.colname.Replace(" ", "_")').autoComplete({
                        minChars: 0,
                        source: function (term, suggest) {
                            term = term.toLowerCase();
                            var choices =  @Html.Raw(item.defval);
                            var suggestions = [];
                            for (i = 0; i < choices.length; i++)
                                if (~choices[i].toLowerCase().indexOf(term)) suggestions.push(choices[i]);
                            suggest(suggestions);
                        }
                    });
                </script>
                
            }

            @for (var nidx = 0; nidx < Model.PJNonMemList.Count; nidx++)
            {
                var item = Model.PJNonMemList[nidx];
                if (string.Compare(item.coltype, ProLEGO.Models.PROJECTCOLUMNTYPE.BOOL, true) == 0)
                {
                    <div class="project-detail" data-col-type="@item.coltype">
                        <div class="project-dot-img"></div>
                        <div class="project-detail-mid">
                            <div class="project-detail-content">
                                <span class="detail-show">@item.colvalue</span>
                                <div class="detail-edit edit-bool-def hidden">
                                    <span class="bool-def-left bool-active">True</span>
                                    <span class="bool-def-right bool-inactive">False</span>
                                </div>
                            </div>
                            <div class="project-detail-line"></div>
                            <div class="project-detail-title">@item.colname</div>
                            <div class="project-title-circle"></div>
                        </div>
                    </div>
                }
                else if (string.Compare(item.coltype, ProLEGO.Models.PROJECTCOLUMNTYPE.DATE, true) == 0)
                {
                    <div class="project-detail" data-col-type="@item.coltype">
                        <div class="project-circle-img"></div>
                        <div class="project-detail-mid">
                            <div class="project-detail-content">
                                <span class="detail-show">@item.colvalue</span>
                                <div class="detail-edit hidden">
                                    <div class="input-group date" data-date="@item.colvalue" data-date-format="yyyy-mm-dd">
                                        <input type="text" class="form-control" id="@item.colname.Replace(" ", "_")" name="@item.colname.Replace(" ", "_")" value="@item.colvalue" readonly>
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-th"></span>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="project-detail-line"></div>
                            <div class="project-detail-title">@item.colname</div>
                            <div class="project-title-circle"></div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="project-detail" data-col-type="@item.coltype">
                        <div class="project-circle-img"></div>
                        <div class="project-detail-mid">
                            <div class="project-detail-content">
                                <span class="detail-show">@item.colvalue</span>
                                <div class="detail-edit hidden">
                                    <input type="text" class="form-control" id="@item.colname.Replace(" ", "_")"
                                           name="@item.colname.Replace(" ", "_")" autocomplete="off" value="@item.colvalue" />
                                </div>
                            </div>
                            <div class="project-detail-line"></div>
                            <div class="project-detail-title">@item.colname</div>
                            <div class="project-title-circle"></div>
                        </div>
                    </div>
                    <script type="text/javascript">
                        $('#@item.colname.Replace(" ", "_")').autoComplete({
                            minChars: 0,
                            source: function (term, suggest) {
                                term = term.toLowerCase();
                                var choices = @Html.Raw(item.defval);
                                var suggestions = [];
                                for (i = 0; i < choices.length; i++)
                                    if (~choices[i].toLowerCase().indexOf(term)) suggestions.push(choices[i]);
                                suggest(suggestions);
                            }
                        });
                    </script>
                }
            }

            <div class="project-detail-end">
                <div class="project-detail-edit"></div>
                <div class="project-dot-img-end hidden"></div>
                <div class="detail-edit hidden">
                    <input type="button" class="btn btn-success detail-edit-btn"
                           id="btn_detail_save" name="btn_detail_save" value="Save">
                </div>
            </div>
        </div>
    </div>
}

<script>
    $(function () {
        ProLego.pro_detail();
    })
</script>

